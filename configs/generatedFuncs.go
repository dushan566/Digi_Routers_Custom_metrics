// Generated by init function

package configs

import (
	"net/http"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

// ####################### Func to capture metrics in each router #######################
// farm1 Router1
func routerfarm1() {
	farm1sim1Status, err := scrap("00000000-00000000-00000000-00000000", "sim1")
	if err != nil {
		farm1Sim1Error.Set(1)
		time.Sleep(60 * time.Second)
	} else {
		farm1Sim1Error.Set(0)
		farm1Sim1.Set(float64(farm1sim1Status))
		time.Sleep(60 * time.Second)
	}

	farm1sim2Status, err := scrap("00000000-00000000-00000000-00000000", "sim2")
	if err != nil {
		farm1Sim2Error.Set(1)
		time.Sleep(60 * time.Second)
	} else {
		farm1Sim2Error.Set(0)
		farm1Sim2.Set(float64(farm1sim2Status))
		time.Sleep(60 * time.Second)
	}
}

// ####################### Prometheus Handlers #######################
func PrometheusHandler() {

	r := prometheus.NewRegistry()
	//Router farm1
	r.MustRegister(farm1Sim1)
	r.MustRegister(farm1Sim1Error)
	r.MustRegister(farm1Sim2)
	r.MustRegister(farm1Sim2Error)

	handler := promhttp.HandlerFor(r, promhttp.HandlerOpts{})
	recordMetrics()

	http.Handle("/metrics", handler)
	http.ListenAndServe(":2112", nil)
}

// #### Run all functions inside goroutines to capture metrics without overlap #####
func recordMetrics() {
	go routerfarm1()
}
