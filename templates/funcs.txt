// Generated by init function

package configs

import (
    "time"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
    "net/http"
)

//####################### Func to capture metrics in each router #######################
{{- range .list }}
// {{.name}} Router
func router{{.name}}() {
		{{.name}}sim1Status, err := scrap("{{.id}}", "sim1")
		if err != nil {
			{{.name}}Sim1Error.Set(1)
			time.Sleep(60 * time.Second)
		} else {
			{{.name}}Sim1Error.Set(0)
			{{.name}}Sim1.Set(float64({{.name}}sim1Status))
			time.Sleep(60 * time.Second)
		}

		{{.name}}sim2Status, err := scrap("{{.id}}", "sim2")
		if err != nil {
			{{.name}}Sim2Error.Set(1)
			time.Sleep(60 * time.Second)
		} else {
			{{.name}}Sim2Error.Set(0)
			{{.name}}Sim2.Set(float64({{.name}}sim2Status))
			time.Sleep(60 * time.Second)
		}
}
{{end}}



//####################### Prometheus Handlers #######################
func PrometheusHandler() {

	r := prometheus.NewRegistry()
{{- range .list }}
	//Router {{.name}}
	r.MustRegister({{.name}}Sim1)
	r.MustRegister({{.name}}Sim1Error)
	r.MustRegister({{.name}}Sim2)
	r.MustRegister({{.name}}Sim2Error)
{{- end}}

	handler := promhttp.HandlerFor(r, promhttp.HandlerOpts{})
	recordMetrics()

	http.Handle("/metrics", handler)
	http.ListenAndServe(":2112", nil)
}

//#### Run all functions inside goroutines to capture metrics without overlap #####
func recordMetrics() {
{{- range .list }}
	go router{{.name}}()
{{- end }}
}
